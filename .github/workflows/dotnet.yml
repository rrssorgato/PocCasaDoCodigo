name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
      
  Build-and-Test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore -fl1 "/flp1:logFile=errors_build.txt;errorsonly" -fl2 "/flp2:logFile=warnings_build.txt;warningsonly"
    - name: Get Output Build
      run: | 
        ERROS_BUILD=$(cat errors_build.txt)
        ERROS_BUILD="${ERROS_BUILD//'%'/'%25'}"
        ERROS_BUILD="${ERROS_BUILD//$'\n'/'^^^^'}"
        ERROS_BUILD="${ERROS_BUILD//$'\r'/'%0D'}"
        
        WARNINGS_BUILD=$(cat warnings_build.txt)
        WARNINGS_BUILD="${WARNINGS_BUILD//'%'/'%25'}"
        WARNINGS_BUILD="${WARNINGS_BUILD//$'\n'/'^^^^'}"
        WARNINGS_BUILD="${WARNINGS_BUILD//$'\r'/'%0D'}"
  
        echo "::set-output name=ErrBuild::$ERROS_BUILD"
        echo "::set-output name=WarnBuild::$WARNINGS_BUILD"
      id: build_step
    
    - name: Test
      run: dotnet test --no-build 2> test_erros.txt | egrep 'Failed!|Passed!' > test_result.txt
      
    - name: Get Output Test
      run: |
        ERRORS_TEST=$(cat test_erros.txt)
        ERRORS_TEST="${ERRORS_TEST//'%'/'%25'}"
        ERRORS_TEST="${ERRORS_TEST//$'\n'/'^^^^'}"
        ERRORS_TEST="${ERRORS_TEST//$'\r'/'%0D'}"
        
        RESULT_TESTS=$(cat test_result.txt)
        RESULT_TESTS="${RESULT_TESTS//'%'/'%25'}"
        RESULT_TESTS="${RESULT_TESTS//$'\n'/'^^^^'}"
        RESULT_TESTS="${RESULT_TESTS//$'\r'/'%0D'}"
        
        echo "::set-output name=ErrTest::$ERRORS_TEST"
        echo "::set-output name=ResultTest::$RESULT_TESTS"
      id: test_step  
    
    - name: Send Build Result
      uses: fjogeleit/http-request-action@v1
      with:
        url: "https://pocstatic-api.herokuapp.com/StaticCode/build"
        method: "POST"
        data: '{ "errors": "${{ steps.build_step.outputs.ErrBuild }}", "warnings": "${{ steps.build_step.outputs.WarnBuild }}" }'
    
    - name: Send Test Result
      uses: fjogeleit/http-request-action@v1
      with:
        url: "https://pocstatic-api.herokuapp.com/StaticCode/Test"
        method: "POST"
        data: '{ "errors": "${{ steps.test_step.outputs.ErrTest }}", "result": "${{ steps.test_step.outputs.ResultTest }}" }'

  sonarQube:
    runs-on: ubuntu-latest
    name: SonarQube
    steps:
    - uses: actions/checkout@master
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.1.0
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_TOKEN }}
        projectBaseDir: "/path/to/my-custom-project"
        projectKey: "xxxxxxxxxxxxxxxxx"
        projectName: "PocCasaDoCodigo"
        projectVersion: "v0.0.1"
        
  Horusec:
  
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v2
    - name: Run Horusec
      run: |
        curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest
        horusec start -p="./" -o sonarqube -O horusec.json -s="LOW" -D -i="**/obj/**, **/bin/**, **/*Test*.cs, **/*TesteIntegrado.cs"
        
    - name: Get Output Horusec
      run: |
        HORUSEC_OUT=$(cat horusec.json)
        HORUSEC_OUT="${HORUSEC_OUT//'%'/'%25'}"
        HORUSEC_OUT="${HORUSEC_OUT//$'\n'/'%0A'}"
        HORUSEC_OUT="${HORUSEC_OUT//$'\r'/'%0D'}"
        
        echo "::set-output name=Horusec::$HORUSEC_OUT"
      id: horusec_step
    - name: Send Horusec Analysis
      uses: fjogeleit/http-request-action@v1
      with:
        url: "https://pocstatic-api.herokuapp.com/StaticCode/Horusec"
        method: "POST"
        data: '${{ steps.horusec_step.outputs.Horusec }}'
        
  SonarCloud:
    runs-on: ubuntu-latest
    container:
      image: sonarqube:8.9-community
      env: 
        sonar.forceAuthentication: false
      ports:
        - 9000
        - 9092
        
    steps:
    - uses: actions/checkout@v2
   
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Install sonar scanner
      run: dotnet tool install --global dotnet-sonarscanner
      
    - name: Run SonarCloud Here
      run: |
        dotnet sonarscanner begin /d:sonar.host.url="http://localhost:9000" /n:"PocCasa" /k:"casa"
        dotnet build
        dotnet sonarscanner end
        
    - name: Get Out
      run: echo $(cat .sonarqube/out/Issues.json)
  Finish:
    needs: [Build-and-Test, Horusec, SonarCloud]

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Run Finalization Here
      run: echo "Hello World"
    
